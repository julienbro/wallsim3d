// Script pour d√©placer les √©l√©ments 290106 et 290105 de 11cm vers l'avant
// √Ä ex√©cuter dans la console du navigateur

function moveSpecificElements() {
    const elementIds = ['290106', '290105'];
    const moveDistance = 11; // 11cm vers l'avant (Z+)
    
    console.log('üöÄ D√©marrage du d√©placement des √©l√©ments 290106 et 290105 de 11cm vers l\'avant...');
    
    elementIds.forEach(id => {
        // Chercher l'√©l√©ment par ID exact
        let element = null;
        
        // M√©thode 1: Dans SceneManager.elements
        if (window.SceneManager && window.SceneManager.elements) {
            element = window.SceneManager.elements.get(id);
        }
        
        // M√©thode 2: Chercher dans tous les √©l√©ments avec ID partiel
        if (!element && window.SceneManager && window.SceneManager.elements) {
            for (let [key, el] of window.SceneManager.elements) {
                if (key.includes(id)) {
                    element = el;
                    console.log(`‚úÖ √âl√©ment trouv√© avec ID partiel: ${key}`);
                    break;
                }
            }
        }
        
        if (element) {
            const oldZ = element.position.z;
            const newZ = oldZ + moveDistance;
            
            console.log(`üì¶ D√©placement √©l√©ment ${id}:`);
            console.log(`   Ancienne position Z: ${oldZ}cm`);
            console.log(`   Nouvelle position Z: ${newZ}cm`);
            
            // Mettre √† jour la position
            if (element.updatePosition && typeof element.updatePosition === 'function') {
                element.updatePosition(element.position.x, element.position.y, newZ);
                console.log(`‚úÖ √âl√©ment ${id} d√©plac√© de ${moveDistance}cm vers l'avant (m√©thode updatePosition)`);
            } else if (element.mesh) {
                // Mise √† jour directe du mesh et de la position
                element.mesh.position.z = newZ / 100; // Conversion cm vers m√®tres pour Three.js
                element.position.z = newZ;
                console.log(`‚úÖ √âl√©ment ${id} d√©plac√© de ${moveDistance}cm vers l'avant (m√©thode mesh)`);
            } else {
                console.warn(`‚ö†Ô∏è Impossible de d√©placer l'√©l√©ment ${id} - m√©thodes non disponibles`);
            }
        } else {
            console.warn(`‚ùå √âl√©ment ${id} non trouv√©`);
            
            // Lister tous les IDs disponibles pour debug
            if (window.SceneManager && window.SceneManager.elements) {
                console.log('üîç IDs disponibles contenant "290":');
                let found = false;
                Array.from(window.SceneManager.elements.keys()).forEach(key => {
                    if (key.includes('290')) {
                        console.log(`  - ${key}`);
                        found = true;
                    }
                });
                if (!found) {
                    console.log('  Aucun √©l√©ment avec ID contenant "290" trouv√©');
                }
            }
        }
    });
    
    console.log('üèÅ D√©placement termin√©');
}

// Fonction alternative pour lister tous les √©l√©ments disponibles
function listAllElements() {
    console.log('üìã Liste de tous les √©l√©ments dans la sc√®ne:');
    if (window.SceneManager && window.SceneManager.elements) {
        Array.from(window.SceneManager.elements.keys()).forEach(key => {
            const element = window.SceneManager.elements.get(key);
            console.log(`  - ID: ${key}, Position: (${element.position.x}, ${element.position.y}, ${element.position.z})`);
        });
    } else {
        console.log('‚ùå SceneManager.elements non disponible');
    }
}

// Message d'instructions
console.log(`
üìã INSTRUCTIONS:
1. Pour d√©placer les √©l√©ments 290106 et 290105 de 11cm vers l'avant, tapez:
   moveSpecificElements()

2. Pour lister tous les √©l√©ments disponibles, tapez:
   listAllElements()
`);