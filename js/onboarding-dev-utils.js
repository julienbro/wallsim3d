/**
 * Utilitaires de d√©veloppement pour l'onboarding
 * Fonctions utiles pour tester et d√©boguer le syst√®me d'onboarding
 */

// Ajouter les utilitaires de d√©veloppement √† la console
window.onboardingUtils = {
    
    // R√©initialiser l'onboarding (effacer le localStorage et relancer)
    reset() {
        localStorage.removeItem('wallsim-onboarding-seen');
        console.log('üîÑ Onboarding r√©initialis√© - rechargez la page pour le voir');
        if (window.OnboardingSystem) {
            window.OnboardingSystem.restart();
        }
    },
    
    // Forcer le d√©marrage imm√©diat (ignorer localStorage)
    forceStart() {
    // Forcer le d√©marrage imm√©diat (ignorer localStorage)
    forceStart() {
        if (window.OnboardingSystem) {
            console.log('üî• D√©marrage forc√© de l\'onboarding');
            window.OnboardingSystem.hasSeenOnboarding = false;
            window.OnboardingSystem.start();
        } else {
            console.error('‚ùå OnboardingSystem non trouv√©');
        }
    },
    
    // D√©marrer l'onboarding manuellement (m√™me si d√©j√† vu)
    start() {
        if (window.OnboardingSystem) {
            console.log('üöÄ D√©marrage manuel de l\'onboarding');
            window.OnboardingSystem.start();
        } else {
            console.error('‚ùå OnboardingSystem non trouv√©');
        }
    },
    
    // Passer √† l'√©tape suivante
    next() {
        if (window.OnboardingSystem && window.OnboardingSystem.isActive) {
            window.OnboardingSystem.nextStep();
        } else {
            console.log('‚ÑπÔ∏è Onboarding non actif');
        }
    },
    
    // √âtape pr√©c√©dente
    prev() {
        if (window.OnboardingSystem && window.OnboardingSystem.isActive) {
            window.OnboardingSystem.previousStep();
        } else {
            console.log('‚ÑπÔ∏è Onboarding non actif');
        }
    },
    
    // Terminer l'onboarding
    complete() {
        if (window.OnboardingSystem && window.OnboardingSystem.isActive) {
            window.OnboardingSystem.complete();
        } else {
            console.log('‚ÑπÔ∏è Onboarding non actif');
        }
    },
    
    // Afficher l'√©tat actuel
    status() {
        if (window.OnboardingSystem) {
            console.log('üìä √âtat de l\'onboarding:', {
                isActive: window.OnboardingSystem.isActive,
                currentStep: window.OnboardingSystem.currentStep + 1,
                totalSteps: window.OnboardingSystem.steps.length,
                hasSeenOnboarding: window.OnboardingSystem.hasSeenOnboarding,
                currentStepData: window.OnboardingSystem.steps[window.OnboardingSystem.currentStep]
            });
        } else {
            console.error('‚ùå OnboardingSystem non trouv√©');
        }
    },
    
    // Simuler la pose d'une premi√®re brique
    simulateFirstBrick() {
        console.log('üß™ Simulation : pose de premi√®re brique');
        document.dispatchEvent(new CustomEvent('brickPlaced', { 
            detail: { 
                element: { id: 'test-brick-1', type: 'brick' }, 
                isFirst: true 
            } 
        }));
    },
    
    // Simuler la s√©lection d'une brique
    simulateBrickSelection() {
        console.log('üß™ Simulation : s√©lection de brique');
        document.dispatchEvent(new CustomEvent('elementSelected', { 
            detail: { 
                element: { id: 'test-brick-1', type: 'brick', toolType: 'brick' },
                properties: {},
                toolType: 'brick'
            } 
        }));
    },
    
    // Simuler la pose d'une brique adjacente
    simulateAdjacentBrick() {
        console.log('üß™ Simulation : pose de brique adjacente');
        document.dispatchEvent(new CustomEvent('adjacentBrickPlaced', { 
            detail: { 
                element: { id: 'test-brick-2', type: 'brick' }, 
                isAdjacent: true 
            } 
        }));
    },
    
    // Simuler la fermeture de la popup d'accueil
    simulatePopupClosed() {
        console.log('üß™ Simulation : fermeture popup d\'accueil');
        window.dispatchEvent(new CustomEvent('startup-popup-closed'));
    },
    
    // Simuler un nouveau projet
    simulateNewProject() {
        console.log('üß™ Simulation : nouveau projet');
        window.dispatchEvent(new CustomEvent('startup-new-project'));
    },
    
    // Simuler la s√©quence compl√®te
    simulateFullSequence() {
        console.log('üé¨ Simulation : s√©quence compl√®te d\'onboarding');
        
        // D√©marrer l'onboarding
        this.start();
        
        // Simuler l'onglet biblio apr√®s 2 secondes
        setTimeout(() => {
            const biblioTab = document.querySelector('[data-tab="biblio"]');
            if (biblioTab) {
                biblioTab.click();
                console.log('üé¨ √âtape 1 : Onglet biblio cliqu√©');
            }
        }, 2000);
        
        // Simuler la pose de brique apr√®s 4 secondes
        setTimeout(() => {
            this.simulateFirstBrick();
            console.log('üé¨ √âtape 2 : Premi√®re brique pos√©e');
        }, 4000);
        
        // Simuler la s√©lection de brique apr√®s 6 secondes
        setTimeout(() => {
            this.simulateBrickSelection();
            console.log('üé¨ √âtape 3 : Brique s√©lectionn√©e');
        }, 6000);
        
        // Simuler la brique adjacente apr√®s 8 secondes
        setTimeout(() => {
            this.simulateAdjacentBrick();
            console.log('üé¨ √âtape 4 : Brique adjacente pos√©e');
        }, 8000);
    },
    
    // Activer le mode debug (affiche plus de logs)
    enableDebug() {
        localStorage.setItem('onboarding-debug', 'true');
        console.log('üêõ Mode debug activ√© - rechargez pour voir plus de logs');
    },
    
    // D√©sactiver le mode debug
    disableDebug() {
        localStorage.removeItem('onboarding-debug');
        console.log('‚úÖ Mode debug d√©sactiv√©');
    }
};

// Afficher les commandes disponibles au chargement
console.log(`
üöÄ Utilitaires d'onboarding charg√©s !
Commandes disponibles dans la console :

onboardingUtils.reset()     - R√©initialiser l'onboarding
onboardingUtils.start()     - D√©marrer l'onboarding
onboardingUtils.next()      - √âtape suivante
onboardingUtils.prev()      - √âtape pr√©c√©dente
onboardingUtils.complete()  - Terminer l'onboarding
onboardingUtils.status()    - Afficher l'√©tat actuel

Tests et simulations :
onboardingUtils.simulateFirstBrick()      - Simuler pose premi√®re brique
onboardingUtils.simulateBrickSelection()  - Simuler s√©lection de brique
onboardingUtils.simulateAdjacentBrick()   - Simuler pose brique adjacente
onboardingUtils.simulatePopupClosed()     - Simuler fermeture popup d'accueil
onboardingUtils.simulateNewProject()      - Simuler nouveau projet
onboardingUtils.simulateFullSequence()   - Simuler s√©quence compl√®te

Debug :
onboardingUtils.enableDebug()  - Activer mode debug
onboardingUtils.disableDebug() - D√©sactiver mode debug
`);
