/**
 * Gestionnaire du Menu √âdition - WallSim3D
 * G√®re toutes les fonctionnalit√©s du menu √âdition de la barre sup√©rieure
 * Inclut : Annuler/R√©tablir, Copier/Coller, S√©lection, Transformation
 */

class EditMenuHandler {
    constructor() {
        this.undoStack = [];
        this.redoStack = [];
        this.maxUndoSteps = 50; // Limite des √©tapes d'annulation
        this.clipboard = {
            elements: [],
            type: null,
            timestamp: null
        };
        this.selectedElements = new Set();
        this.isRecording = true; // Pour √©viter l'enregistrement d'actions en cascade
        this.transformState = {
            isTransforming: false,
            mode: null, // 'move', 'rotate', 'scale'
            startPosition: null,
            elements: []
        };
        this.init();
    }

    init() {
        // console.log('‚úÇÔ∏è Initialisation du gestionnaire de menu √âdition...');
        this.setupEventListeners();
        this.setupKeyboardShortcuts();
        this.setupSelectionSystem();
        this.recordInitialState();
    }

    // ===============================================
    // CONFIGURATION DES √âV√âNEMENTS
    // ===============================================

    setupEventListeners() {
        // Menu Annuler
        this.addMenuListener('undoAction', () => this.undo());
        
        // Menu R√©tablir
        this.addMenuListener('redoAction', () => this.redo());
        
        // Menu Copier
        this.addMenuListener('copyAction', () => this.copy());
        
        // Menu Coller
        this.addMenuListener('pasteAction', () => this.paste());
        
        // Menu Supprimer
        this.addMenuListener('deleteAction', () => this.deleteSelected());

        // √âcouter les changements de s√©lection
        document.addEventListener('elementSelected', (e) => {
            this.handleElementSelection(e.detail);
        });

        document.addEventListener('elementDeselected', (e) => {
            this.handleElementDeselection(e.detail);
        });

        // √âcouter les changements dans la sc√®ne
        document.addEventListener('sceneModified', (e) => {
            if (this.isRecording) {
                this.recordState(e.detail?.action || 'modification');
            }
        });

        // üìù NOUVEAU: √âcouter les changements de sc√®ne pour enregistrer automatiquement l'√©tat
        document.addEventListener('sceneChanged', (e) => {
            // console.log(`üì® √âv√©nement sceneChanged re√ßu:`, e.detail);
            if (e.detail && e.detail.action && e.detail.changeType) {
                // Utiliser un d√©lai pour s'assurer que tous les changements sont termin√©s
                setTimeout(() => {
                    this.recordState(e.detail.action || 'modification');
                }, 150);
            }
        });

        // console.log('üìã √âv√©nements du menu √âdition configur√©s');
    }

    addMenuListener(elementId, callback) {
        const element = document.getElementById(elementId);
        if (element) {
            // Supprimer tout listener existant pour √©viter les doublons
            element.removeEventListener('click', element._editMenuCallback);
            
            // Cr√©er et stocker le callback
            element._editMenuCallback = (e) => {
                e.preventDefault();
                e.stopPropagation();
                callback();
            };
            
            element.addEventListener('click', element._editMenuCallback);
        } else {
            console.warn(`‚ö†Ô∏è √âl√©ment ${elementId} non trouv√©`);
        }
    }

    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // √âviter les conflits avec les champs de texte
            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {
                return;
            }

            if (e.ctrlKey || e.metaKey) {
                switch (e.key.toLowerCase()) {
                    case 'z':
                        e.preventDefault();
                        if (e.shiftKey) {
                            this.redo();
                        } else {
                            this.undo();
                        }
                        break;
                    case 'y':
                        e.preventDefault();
                        this.redo();
                        break;
                    case 'c':
                        e.preventDefault();
                        this.copy();
                        break;
                    case 'v':
                        e.preventDefault();
                        this.paste();
                        break;
                    case 'x':
                        e.preventDefault();
                        this.cut();
                        break;
                    case 'a':
                        e.preventDefault();
                        this.selectAll();
                        break;
                    case 'd':
                        e.preventDefault();
                        this.duplicate();
                        break;
                }
            }

            // Touches individuelles
            switch (e.key) {
                case 'Delete':
                case 'Backspace':
                    e.preventDefault();
                    this.deleteSelected();
                    break;
                case 'Escape':
                    e.preventDefault();
                    this.deselectAll();
                    break;
            }
        });
        // console.log('‚å®Ô∏è Raccourcis clavier du menu √âdition configur√©s');
    }

    setupSelectionSystem() {
        // Configuration du syst√®me de s√©lection avanc√©
        this.selectionBox = null;
        this.isSelecting = false;
        this.selectionStart = null;

        // √âcouter les clics pour la s√©lection
        if (window.SceneManager && window.SceneManager.renderer) {
            const canvas = window.SceneManager.renderer.domElement;
            
            canvas.addEventListener('mousedown', (e) => {
                if (e.ctrlKey && e.button === 0) {
                    this.startBoxSelection(e);
                }
            });

            canvas.addEventListener('mousemove', (e) => {
                if (this.isSelecting) {
                    this.updateBoxSelection(e);
                }
            });

            canvas.addEventListener('mouseup', (e) => {
                if (this.isSelecting) {
                    this.endBoxSelection(e);
                }
            });
        }
    }

    // ===============================================
    // SYST√àME ANNULER/R√âTABLIR
    // ===============================================

    recordState(actionName = 'action', customData = null) {
        if (!this.isRecording) {
            console.log(`‚è∏Ô∏è Enregistrement d√©sactiv√© pour: ${actionName}`);
            return;
        }

        if (!window.SceneManager) {
            console.warn(`‚ö†Ô∏è SceneManager non disponible pour enregistrer: ${actionName}`);
            return;
        }

        try {
            // Capturer l'√©tat actuel de la sc√®ne
            // console.log(`üìù Enregistrement de l'√©tat: ${actionName}`);
            const sceneData = window.SceneManager.exportScene();
            
            const state = {
                timestamp: Date.now(),
                action: actionName,
                sceneData: sceneData,
                selectedElements: Array.from(this.selectedElements),
                customData: customData
            };

            // Ajouter √† la pile d'annulation
            this.undoStack.push(state);
            // console.log(`‚úÖ √âtat ajout√© √† la pile (taille: ${this.undoStack.length})`);

            // Limiter la taille de la pile
            if (this.undoStack.length > this.maxUndoSteps) {
                this.undoStack.shift();
                console.log(`üóëÔ∏è Ancien √©tat supprim√© (limite: ${this.maxUndoSteps})`);
            }

            // Vider la pile de r√©tablissement
            this.redoStack = [];

            this.updateUndoRedoButtons();
            this.updateHistoryUI();
            // console.log(`üìù √âtat enregistr√© avec succ√®s: ${actionName}`);
            
        } catch (error) {
            console.error(`‚ùå Erreur lors de l'enregistrement de ${actionName}:`, error);
        }
    }

    recordInitialState() {
        // Attendre que le SceneManager soit pr√™t
        const tryRecordInitial = () => {
            if (window.SceneManager && typeof window.SceneManager.exportScene === 'function') {
                // console.log('üéØ SceneManager d√©tect√© - enregistrement de l\'√©tat initial');
                this.recordState('initial_state');
                return true;
            }
            return false;
        };

        // Essayer imm√©diatement
        if (!tryRecordInitial()) {
            console.log('‚è≥ SceneManager pas encore pr√™t, attente...');
            
            // R√©essayer p√©riodiquement
            let attempts = 0;
            const maxAttempts = 50; // 5 secondes max
            const interval = setInterval(() => {
                attempts++;
                if (tryRecordInitial() || attempts >= maxAttempts) {
                    clearInterval(interval);
                    if (attempts >= maxAttempts) {
                        console.warn('‚ö†Ô∏è Timeout - impossible d\'enregistrer l\'√©tat initial');
                    }
                }
            }, 100);
        }
    }

    undo() {
        // Protection stricte contre les appels multiples
        const now = Date.now();
        if (this._lastUndoTime && (now - this._lastUndoTime) < 1500) {
            // console.log(`‚Ü∂ Annulation ignor√©e - trop rapide (${now - this._lastUndoTime}ms)`);
            return;
        }
        this._lastUndoTime = now;
        
        // Protection contre les appels multiples rapides
        if (this._undoInProgress) {
            // console.log('‚Ü∂ Annulation d√©j√† en cours, ignor√©e');
            return;
        }
        this._undoInProgress = true;
        
        // console.log(`üîç Debug undo - Stack size: ${this.undoStack.length}, SceneManager exists: ${!!window.SceneManager}`);
        
        if (this.undoStack.length <= 1) {
            this.showNotification('Aucune action √† annuler', 'info');
            // console.log('‚ùå Pas d\'action √† annuler - pile trop petite');
            this._undoInProgress = false;
            return;
        }

        if (!window.SceneManager) {
            this.showNotification('Erreur: SceneManager non disponible', 'error');
            console.error('‚ùå SceneManager non disponible pour l\'annulation');
            this._undoInProgress = false;
            return;
        }

        // console.log('‚Ü∂ Annulation en cours...');
        this.isRecording = false;

        try {
            // Sauvegarder l'√©tat actuel dans la pile de r√©tablissement
            const currentState = {
                timestamp: Date.now(),
                action: 'current_state',
                sceneData: window.SceneManager.exportScene(),
                selectedElements: Array.from(this.selectedElements)
            };
            this.redoStack.push(currentState);
            // console.log('‚úÖ √âtat actuel sauvegard√© pour redo');

            // Retirer l'√©tat actuel de la pile d'annulation
            this.undoStack.pop();
            
            // Restaurer l'√©tat pr√©c√©dent
            const previousState = this.undoStack[this.undoStack.length - 1];
            // console.log(`üîÑ Restauration de l'√©tat: ${previousState.action}`);
            
            this.restoreState(previousState);

            this.isRecording = true;
            this.updateUndoRedoButtons();
            this.updateHistoryUI();
            this.showNotification(`Annul√©: ${previousState.action}`, 'success');
            // console.log('‚úÖ Annulation termin√©e avec succ√®s');
            
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'annulation:', error);
            this.showNotification('Erreur lors de l\'annulation', 'error');
            this.isRecording = true;
        } finally {
            // Toujours remettre le flag √† false
            this._undoInProgress = false;
        }
    }

    redo() {
        // Protection stricte contre les appels multiples
        const now = Date.now();
        if (this._lastRedoTime && (now - this._lastRedoTime) < 1500) {
            // console.log(`‚Ü∑ R√©tablissement ignor√© - trop rapide (${now - this._lastRedoTime}ms)`);
            return;
        }
        this._lastRedoTime = now;
        
        // Protection contre les appels multiples rapides
        if (this._redoInProgress) {
            // console.log('‚Ü∑ R√©tablissement d√©j√† en cours, ignor√©');
            return;
        }
        this._redoInProgress = true;
        
        try {
            if (this.redoStack.length === 0) {
                this.showNotification('Aucune action √† r√©tablir', 'info');
                return;
            }

            // console.log('‚Ü∑ R√©tablissement en cours...');
            this.isRecording = false;

            // Restaurer l'√©tat depuis la pile de r√©tablissement
            const nextState = this.redoStack.pop();
            this.restoreState(nextState);

            // Ajouter l'√©tat restaur√© √† la pile d'annulation
            this.undoStack.push(nextState);

            this.isRecording = true;
            this.updateUndoRedoButtons();
            this.showNotification(`R√©tabli: ${nextState.action}`, 'success');
        } finally {
            // Toujours remettre le flag √† false
            this._redoInProgress = false;
        }
    }

    restoreState(state) {
        // console.log(`üîÑ D√©but de restauration d'√©tat: ${state.action}`);
        
        if (!state.sceneData) {
            console.warn('‚ö†Ô∏è Pas de donn√©es de sc√®ne √† restaurer');
            return;
        }

        if (!window.SceneManager) {
            console.error('‚ùå SceneManager non disponible pour la restauration');
            this.showNotification('Erreur: SceneManager non disponible', 'error');
            return;
        }

        try {
            // üõ°Ô∏è IMPORTANT: D√©sactiver temporairement l'ajout automatique de joints
            const originalAutoJoints = window.ConstructionTools?.autoJoints;
            if (window.ConstructionTools) {
                window.ConstructionTools.autoJoints = false;
                // console.log('‚è∏Ô∏è Joints automatiques temporairement d√©sactiv√©s pour restauration');
            }

            // D√©sactiver √©galement l'enregistrement d'√©tat pendant la restauration
            const wasRecording = this.isRecording;
            this.isRecording = false;

            // Restaurer la sc√®ne
            // console.log('üîÑ Importation des donn√©es de sc√®ne...');
            
            // V√©rifier si les donn√©es de sc√®ne sont valides
            if (!state.sceneData || !state.sceneData.elements || state.sceneData.elements.length === 0) {
                // console.log('üîÑ √âtat initial vide d√©tect√© - nettoyage de la sc√®ne');
                // Pour l'√©tat initial vide, on vide simplement la sc√®ne
                window.SceneManager.clearAll();
            } else {
                // Import normal avec des donn√©es valides
                window.SceneManager.importScene(state.sceneData);
            }
            // console.log('‚úÖ Sc√®ne restaur√©e');

            // Restaurer la s√©lection
            this.selectedElements.clear();
            if (state.selectedElements && state.selectedElements.length > 0) {
                // console.log(`üîÑ Restauration de ${state.selectedElements.length} √©l√©ments s√©lectionn√©s`);
                state.selectedElements.forEach(elementId => {
                    const element = window.SceneManager.elements.get(elementId);
                    if (element) {
                        this.selectedElements.add(elementId);
                        this.highlightElement(element, true);
                    }
                });
            }

            // üîÑ Restaurer les param√®tres originaux
            if (window.ConstructionTools && originalAutoJoints !== undefined) {
                window.ConstructionTools.autoJoints = originalAutoJoints;
                // console.log('üîÑ Joints automatiques restaur√©s:', originalAutoJoints);
            }

            // Restaurer l'enregistrement
            this.isRecording = wasRecording;

            this.updateSelectionDisplay();
            // console.log('‚úÖ √âtat restaur√© avec succ√®s');
            
        } catch (error) {
            console.error('‚ùå Erreur lors de la restauration:', error);
            this.showNotification('Erreur lors de la restauration', 'error');
            
            // S'assurer de restaurer les param√®tres en cas d'erreur
            if (window.ConstructionTools && originalAutoJoints !== undefined) {
                window.ConstructionTools.autoJoints = originalAutoJoints;
            }
            this.isRecording = true;
        }
    }

    updateUndoRedoButtons() {
        const undoBtn = document.getElementById('undoAction');
        const redoBtn = document.getElementById('redoAction');

        // console.log(`üîÑ Mise √† jour boutons - Undo: ${this.undoStack.length}, Redo: ${this.redoStack.length}`);

        if (undoBtn) {
            const canUndo = this.undoStack.length > 1;
            undoBtn.style.opacity = canUndo ? '1' : '0.5';
            undoBtn.disabled = !canUndo;
            undoBtn.title = canUndo 
                ? `Annuler: ${this.undoStack[this.undoStack.length - 1]?.action || 'action'}`
                : 'Aucune action √† annuler';
            // console.log(`üîò Bouton Undo: ${canUndo ? 'activ√©' : 'd√©sactiv√©'}`);
        } else {
            console.warn('‚ö†Ô∏è Bouton undoAction introuvable');
        }
        
        if (redoBtn) {
            const canRedo = this.redoStack.length > 0;
            redoBtn.style.opacity = canRedo ? '1' : '0.5';
            redoBtn.disabled = !canRedo;
            redoBtn.title = canRedo 
                ? `R√©tablir: ${this.redoStack[this.redoStack.length - 1]?.action || 'action'}`
                : 'Aucune action √† r√©tablir';
            // console.log(`üîò Bouton Redo: ${canRedo ? 'activ√©' : 'd√©sactiv√©'}`);
        } else {
            console.warn('‚ö†Ô∏è Bouton redoAction introuvable');
        }
    }

    // ===============================================
    // SYST√àME COPIER/COLLER
    // ===============================================

    copy() {
        // Protection contre les appels multiples rapides
        if (this._copyInProgress) {
            // console.log('üìã Copie d√©j√† en cours, ignor√©e');
            return;
        }
        this._copyInProgress = true;
        
        setTimeout(() => {
            this._copyInProgress = false;
        }, 500); // D√©lai de protection de 500ms
        
        // V√©rifier d'abord les √©l√©ments s√©lectionn√©s par le syst√®me de s√©lection multiple
        let elementsToPlay = [];
        
        if (this.selectedElements.size > 0) {
            // Utiliser la s√©lection multiple
            // console.log(`üìã Copie via s√©lection multiple: ${this.selectedElements.size} √©l√©ment(s)`);
            this.selectedElements.forEach(elementId => {
                const element = window.SceneManager?.elements.get(elementId);
                if (element) {
                    elementsToPlay.push(element);
                }
            });
        } else if (window.SceneManager?.selectedElement) {
            // Utiliser l'√©l√©ment s√©lectionn√© par l'outil de s√©lection du menu lat√©ral
            // console.log(`üìã Copie via outil de s√©lection: ${window.SceneManager.selectedElement.id}`);
            elementsToPlay.push(window.SceneManager.selectedElement);
        }
        
        if (elementsToPlay.length === 0) {
            this.showNotification('Aucun √©l√©ment s√©lectionn√©', 'warning');
            // console.warn('üìã Copie impossible - aucun √©l√©ment trouv√© dans selectedElements ni dans SceneManager.selectedElement');
            return;
        }

        // Copier les √©l√©ments trouv√©s
        this.clipboard.elements = [];
        this.clipboard.type = 'elements';
        this.clipboard.timestamp = Date.now();

        elementsToPlay.forEach(element => {
            this.clipboard.elements.push(element.toJSON());
        });

        console.log(`üìã ${this.clipboard.elements.length} √©l√©ment(s) copi√©(s) dans le presse-papiers`);
        this.showNotification(`${this.clipboard.elements.length} √©l√©ment(s) copi√©(s)`, 'success');
        this.updatePasteButton();
        this.showClipboardIndicator('copy');
    }

    cut() {
        // V√©rifier les √©l√©ments s√©lectionn√©s (m√™me logique que copy)
        let hasSelectedElements = this.selectedElements.size > 0 || window.SceneManager?.selectedElement;
        
        if (!hasSelectedElements) {
            this.showNotification('Aucun √©l√©ment s√©lectionn√©', 'warning');
            console.warn('‚úÇÔ∏è Coupe impossible - aucun √©l√©ment s√©lectionn√©');
            return;
        }

        console.log(`‚úÇÔ∏è Coupe d'√©l√©ment(s) s√©lectionn√©(s)`);
        
        // Enregistrer l'√©tat avant la coupe
        this.recordState('cut');

        // Copier puis supprimer
        this.copy();
        this.deleteSelected(false); // false = ne pas enregistrer l'√©tat (d√©j√† fait)

        this.showNotification(`${this.clipboard.elements.length} √©l√©ment(s) coup√©(s)`, 'success');
    }

    paste() {
        if (!this.clipboard.elements || this.clipboard.elements.length === 0) {
            this.showNotification('Presse-papiers vide', 'warning');
            return;
        }

        console.log(`üìã Collage de ${this.clipboard.elements.length} √©l√©ment(s)`);
        
        // Enregistrer l'√©tat avant le collage
        this.recordState('paste');

        // D√©s√©lectionner tout
        this.deselectAll();

        // Calculer le d√©calage pour √©viter la superposition
        const offset = this.calculatePasteOffset();
        console.log(`üìç D√©calage calcul√© pour le collage: x=${offset.x}, z=${offset.z}`);

        // Coller les √©l√©ments
        const pastedElements = [];
        this.clipboard.elements.forEach(elementData => {
            console.log(`üîç D√©s√©rialisation √©l√©ment:`, elementData);
            const element = window.WallElement ? window.WallElement.fromJSON(elementData) : null;
            if (element && window.SceneManager) {
                // V√©rifier que le mat√©riau est correctement d√©fini
                console.log(`üé® Mat√©riau de l'√©l√©ment: "${element.material}"`);
                
                // Appliquer le d√©calage
                element.position.x += offset.x;
                element.position.y += offset.y;
                element.position.z += offset.z;

                // G√©n√©rer un nouvel ID
                element.id = this.generateUniqueId();

                // CORRECTIF: Forcer la recr√©ation du mesh avec le bon mat√©riau
                console.log(`üîß Recr√©ation forc√©e du mesh pour l'√©l√©ment coll√©...`);
                
                // Supprimer l'ancien mesh s'il existe
                if (element.mesh) {
                    if (element.mesh.geometry) element.mesh.geometry.dispose();
                    if (element.mesh.material) element.mesh.material.dispose();
                    element.mesh = null;
                }

                // Recr√©er le mesh
                element.createMesh();
                
                // Double v√©rification du mat√©riau avec force SOLID
                if (element.mesh && window.MaterialLibrary) {
                    console.log(`üé® Double v√©rification mat√©riau: ${element.material}`);
                    const correctMaterial = window.MaterialLibrary.getThreeJSMaterial(element.material);
                    if (correctMaterial) {
                        // FORCER le mat√©riau √† √™tre SOLIDE (pas wireframe)
                        correctMaterial.wireframe = false;
                        correctMaterial.needsUpdate = true;
                        element.mesh.material = correctMaterial;
                        element.mesh.material.needsUpdate = true;
                        console.log(`‚úÖ Mat√©riau re-appliqu√© avec FORCE SOLID`);
                    } else {
                        console.log(`‚ùå ERREUR: Mat√©riau '${element.material}' non trouv√© dans MaterialLibrary`);
                        // Cr√©er un mat√©riau de fallback SOLIDE
                        const fallbackMaterial = new THREE.MeshLambertMaterial({ 
                            color: 0xff0000,
                            wireframe: false,
                            side: THREE.DoubleSide 
                        });
                        element.mesh.material = fallbackMaterial;
                        console.log(`üîß Mat√©riau fallback SOLIDE appliqu√©`);
                    }
                } else {
                    console.log(`‚ùå ERREUR: Mesh ou MaterialLibrary non disponible`);
                }

                // Ajouter √† la sc√®ne
                window.SceneManager.addElement(element);
                pastedElements.push(element);

                // NE PAS s√©lectionner automatiquement l'√©l√©ment coll√© pour √©viter le wireframe
                console.log(`‚úÖ √âl√©ment coll√©: ${element.id} - PAS de s√©lection automatique`);
            }
        });

        this.updateSelectionDisplay();
        this.showNotification(`${pastedElements.length} √©l√©ment(s) coll√©(s)`, 'success');
    }

    duplicate() {
        if (this.selectedElements.size === 0) {
            this.showNotification('Aucun √©l√©ment s√©lectionn√©', 'warning');
            return;
        }

        console.log(`üë• Duplication de ${this.selectedElements.size} √©l√©ment(s)`);
        
        // Copier puis coller imm√©diatement
        this.copy();
        this.paste();
    }

    calculatePasteOffset() {
        // Calculer un d√©calage intelligent pour √©viter la superposition
        const gridSpacing = window.SceneManager?.gridSpacing || 10;
        const baseOffset = Math.max(gridSpacing * 3, 25); // Minimum 25cm pour √©viter les adjacences automatiques

        // V√©rifier s'il y a des √©l√©ments dans le presse-papiers pour d√©terminer leur taille
        if (!this.clipboard.elements || this.clipboard.elements.length === 0) {
            return { x: baseOffset, y: 0, z: baseOffset };
        }

        // Obtenir tous les √©l√©ments existants de la sc√®ne
        const existingElements = this.getAllSceneElements();
        
        // Calculer la bo√Æte englobante du contenu √† coller
        const clipboardBounds = this.calculateClipboardBounds();
        
        // Chercher un espace libre en spirale autour de la position d'origine
        for (let distance = baseOffset; distance <= baseOffset * 10; distance += baseOffset) {
            const testPositions = [
                { x: distance, y: 0, z: 0 },           // droite
                { x: -distance, y: 0, z: 0 },          // gauche  
                { x: 0, y: 0, z: distance },           // avant
                { x: 0, y: 0, z: -distance },          // arri√®re
                { x: distance, y: 0, z: distance },    // diagonale droite-avant
                { x: -distance, y: 0, z: distance },   // diagonale gauche-avant
                { x: distance, y: 0, z: -distance },   // diagonale droite-arri√®re
                { x: -distance, y: 0, z: -distance }   // diagonale gauche-arri√®re
            ];

            for (const offset of testPositions) {
                if (!this.wouldCollideWithExisting(clipboardBounds, offset, existingElements)) {
                    console.log(`üìç Espace libre trouv√© √†: x=${offset.x}, z=${offset.z}`);
                    return offset;
                }
            }
        }

        // Si aucun espace libre n'est trouv√©, utiliser le d√©calage de base
        console.log('‚ö†Ô∏è Aucun espace libre trouv√©, utilisation du d√©calage de base');
        return { x: baseOffset, y: 0, z: baseOffset };
    }

    getAllSceneElements() {
        // R√©cup√©rer tous les √©l√©ments de la sc√®ne
        const elements = [];
        if (window.SceneManager && window.SceneManager.elements) {
            window.SceneManager.elements.forEach((element) => {
                elements.push(element);
            });
        }
        return elements;
    }

    calculateClipboardBounds() {
        // Calculer la bo√Æte englobante de tous les √©l√©ments dans le presse-papiers
        let minX = Infinity, minZ = Infinity;
        let maxX = -Infinity, maxZ = -Infinity;

        this.clipboard.elements.forEach(elementData => {
            const pos = elementData.position;
            const dims = elementData.dimensions;
            
            const halfWidth = dims.width / 2;
            const halfDepth = dims.depth / 2;
            
            minX = Math.min(minX, pos.x - halfWidth);
            maxX = Math.max(maxX, pos.x + halfWidth);
            minZ = Math.min(minZ, pos.z - halfDepth);
            maxZ = Math.max(maxZ, pos.z + halfDepth);
        });

        return {
            minX: minX,
            maxX: maxX,
            minZ: minZ,
            maxZ: maxZ,
            width: maxX - minX,
            depth: maxZ - minZ
        };
    }

    wouldCollideWithExisting(clipboardBounds, offset, existingElements) {
        // Calculer la nouvelle position des √©l√©ments du presse-papiers avec l'offset
        const newBounds = {
            minX: clipboardBounds.minX + offset.x,
            maxX: clipboardBounds.maxX + offset.x,
            minZ: clipboardBounds.minZ + offset.z,
            maxZ: clipboardBounds.maxZ + offset.z
        };

        // Ajouter une marge de s√©curit√© pour √©viter les adjacences d√©tect√©es comme collisions
        const safetyMargin = 5; // 5cm de marge minimum

        // V√©rifier les collisions avec tous les √©l√©ments existants
        for (const element of existingElements) {
            const pos = element.position;
            const dims = element.dimensions;
            
            const elementMinX = pos.x - dims.width / 2 - safetyMargin;
            const elementMaxX = pos.x + dims.width / 2 + safetyMargin;
            const elementMinZ = pos.z - dims.depth / 2 - safetyMargin;
            const elementMaxZ = pos.z + dims.depth / 2 + safetyMargin;

            // Test d'intersection 2D avec marge de s√©curit√©
            const intersectsX = newBounds.maxX >= elementMinX && newBounds.minX <= elementMaxX;
            const intersectsZ = newBounds.maxZ >= elementMinZ && newBounds.minZ <= elementMaxZ;

            if (intersectsX && intersectsZ) {
                console.log(`‚ùå Collision d√©tect√©e avec √©l√©ment ${element.id} √† position (${pos.x}, ${pos.z})`);
                return true; // Collision d√©tect√©e
            }
        }

        return false; // Pas de collision
    }

    updatePasteButton() {
        const pasteBtn = document.getElementById('pasteAction');
        if (pasteBtn) {
            pasteBtn.style.opacity = this.clipboard.elements.length > 0 ? '1' : '0.5';
        }
    }

    // ===============================================
    // SYST√àME DE S√âLECTION
    // ===============================================

    handleElementSelection(elementInfo) {
        if (elementInfo && elementInfo.id) {
            this.selectedElements.add(elementInfo.id);
            this.updateSelectionDisplay();
        }
    }

    handleElementDeselection(elementInfo) {
        if (elementInfo && elementInfo.id) {
            this.selectedElements.delete(elementInfo.id);
            this.updateSelectionDisplay();
        }
    }

    selectAll() {
        console.log('üîò S√©lection de tous les √©l√©ments');
        
        if (window.SceneManager) {
            this.selectedElements.clear();
            window.SceneManager.elements.forEach((element, id) => {
                this.selectedElements.add(id);
                this.highlightElement(element, true);
            });
            
            this.updateSelectionDisplay();
            this.showNotification(`${this.selectedElements.size} √©l√©ment(s) s√©lectionn√©(s)`, 'info');
        }
    }

    deselectAll() {
        console.log('‚≠ï D√©s√©lection de tous les √©l√©ments');
        
        if (window.SceneManager) {
            this.selectedElements.forEach(elementId => {
                const element = window.SceneManager.elements.get(elementId);
                if (element) {
                    this.highlightElement(element, false);
                }
            });
        }
        
        this.selectedElements.clear();
        this.updateSelectionDisplay();
    }

    selectInverse() {
        console.log('üîÑ Inversion de la s√©lection');
        
        if (window.SceneManager) {
            const newSelection = new Set();
            
            window.SceneManager.elements.forEach((element, id) => {
                if (this.selectedElements.has(id)) {
                    // D√©s√©lectionner
                    this.highlightElement(element, false);
                } else {
                    // S√©lectionner
                    newSelection.add(id);
                    this.highlightElement(element, true);
                }
            });
            
            this.selectedElements = newSelection;
            this.updateSelectionDisplay();
            this.showNotification(`${this.selectedElements.size} √©l√©ment(s) s√©lectionn√©(s)`, 'info');
        }
    }

    // ===============================================
    // S√âLECTION PAR BO√éTE
    // ===============================================

    startBoxSelection(event) {
        this.isSelecting = true;
        this.selectionStart = {
            x: event.clientX,
            y: event.clientY
        };

        // Cr√©er la bo√Æte de s√©lection visuelle
        this.createSelectionBox(event.clientX, event.clientY);
        
        event.preventDefault();
        console.log('üì¶ D√©but de s√©lection par bo√Æte');
    }

    updateBoxSelection(event) {
        if (!this.isSelecting || !this.selectionBox) return;

        const currentX = event.clientX;
        const currentY = event.clientY;
        
        const left = Math.min(this.selectionStart.x, currentX);
        const top = Math.min(this.selectionStart.y, currentY);
        const width = Math.abs(currentX - this.selectionStart.x);
        const height = Math.abs(currentY - this.selectionStart.y);

        this.selectionBox.style.left = left + 'px';
        this.selectionBox.style.top = top + 'px';
        this.selectionBox.style.width = width + 'px';
        this.selectionBox.style.height = height + 'px';
    }

    endBoxSelection(event) {
        if (!this.isSelecting) return;

        this.isSelecting = false;
        
        // Calculer la zone de s√©lection
        const selectionRect = {
            left: Math.min(this.selectionStart.x, event.clientX),
            top: Math.min(this.selectionStart.y, event.clientY),
            right: Math.max(this.selectionStart.x, event.clientX),
            bottom: Math.max(this.selectionStart.y, event.clientY)
        };

        // S√©lectionner les √©l√©ments dans la zone
        this.selectElementsInBox(selectionRect);

        // Nettoyer la bo√Æte de s√©lection
        if (this.selectionBox) {
            this.selectionBox.remove();
            this.selectionBox = null;
        }

        console.log('üì¶ Fin de s√©lection par bo√Æte');
    }

    createSelectionBox(x, y) {
        this.selectionBox = document.createElement('div');
        this.selectionBox.className = 'selection-box';
        this.selectionBox.style.cssText = `
            position: fixed;
            left: ${x}px;
            top: ${y}px;
            width: 0;
            height: 0;
            border: 2px dashed #3498db;
            background: rgba(52, 152, 219, 0.1);
            z-index: 10000;
            pointer-events: none;
        `;
        document.body.appendChild(this.selectionBox);
    }

    selectElementsInBox(rect) {
        if (!window.SceneManager) return;

        let selectedCount = 0;
        
        window.SceneManager.elements.forEach((element, id) => {
            // Convertir la position 3D en position 2D √©cran
            const screenPos = this.worldToScreen(element.position);
            
            if (screenPos && 
                screenPos.x >= rect.left && 
                screenPos.x <= rect.right &&
                screenPos.y >= rect.top && 
                screenPos.y <= rect.bottom) {
                
                this.selectedElements.add(id);
                this.highlightElement(element, true);
                selectedCount++;
            }
        });

        this.updateSelectionDisplay();
        this.showNotification(`${selectedCount} √©l√©ment(s) s√©lectionn√©(s) par bo√Æte`, 'info');
    }

    // ===============================================
    // SUPPRESSION
    // ===============================================

    deleteSelected(recordState = true) {
        // Protection contre les appels multiples rapides
        if (this._deleteInProgress) {
            // console.log('üóëÔ∏è Suppression d√©j√† en cours, ignor√©e');
            return;
        }
        this._deleteInProgress = true;
        
        setTimeout(() => {
            this._deleteInProgress = false;
        }, 500); // D√©lai de protection de 500ms
        
        // V√©rifier les √©l√©ments s√©lectionn√©s (m√™me logique que copy)
        let elementsToDelete = [];
        
        if (this.selectedElements.size > 0) {
            // Utiliser la s√©lection multiple
            // console.log(`üóëÔ∏è Suppression via s√©lection multiple: ${this.selectedElements.size} √©l√©ment(s)`);
            this.selectedElements.forEach(elementId => {
                if (window.SceneManager?.elements.has(elementId)) {
                    elementsToDelete.push(elementId);
                }
            });
        } else if (window.SceneManager?.selectedElement) {
            // Utiliser l'√©l√©ment s√©lectionn√© par l'outil de s√©lection du menu lat√©ral
            // console.log(`üóëÔ∏è Suppression via outil de s√©lection: ${window.SceneManager.selectedElement.id}`);
            if (window.SceneManager.elements.has(window.SceneManager.selectedElement.id)) {
                elementsToDelete.push(window.SceneManager.selectedElement.id);
            }
        }
        
        if (elementsToDelete.length === 0) {
            this.showNotification('Aucun √©l√©ment s√©lectionn√©', 'warning');
            // console.warn('üóëÔ∏è Suppression impossible - aucun √©l√©ment s√©lectionn√©');
            return;
        }

        if (recordState) {
            this.recordState('delete');
        }

        // Supprimer les √©l√©ments trouv√©s ET leurs joints associ√©s
        let deletedCount = 0;
        let deletedJointsCount = 0;
        
        elementsToDelete.forEach(elementId => {
            // D'abord supprimer les joints associ√©s √† cet √©l√©ment
            const associatedJoints = this.findAssociatedJoints(elementId);
            associatedJoints.forEach(jointId => {
                console.log(`üîó Suppression du joint associ√©: ${jointId} (parent: ${elementId})`);
                window.SceneManager.removeElement(jointId);
                deletedJointsCount++;
            });
            
            // Puis supprimer l'√©l√©ment principal
            console.log(`üóëÔ∏è Suppression de l'√©l√©ment: ${elementId}`);
            window.SceneManager.removeElement(elementId);
            deletedCount++;
        });

        // Nettoyer les s√©lections
        this.selectedElements.clear();
        if (window.SceneManager.selectedElement) {
            window.SceneManager.selectedElement = null;
        }
        
        this.updateSelectionDisplay();
        
        // Message informatif
        let message = `${deletedCount} √©l√©ment(s) supprim√©(s)`;
        if (deletedJointsCount > 0) {
            message += ` + ${deletedJointsCount} joint(s) associ√©(s)`;
        }
        this.showNotification(message, 'success');
    }

    // Nouvelle m√©thode pour trouver les joints associ√©s √† un √©l√©ment
    findAssociatedJoints(parentElementId) {
        const associatedJoints = [];
        
        console.log(`üîç Recherche des joints pour l'√©l√©ment parent: ${parentElementId}`);
        
        if (window.SceneManager?.scene) {
            window.SceneManager.scene.traverse((child) => {
                // V√©rifier si c'est un joint associ√© √† l'√©l√©ment parent
                if (child.userData && child.userData.isJoint) {
                    console.log(`üîç Joint examin√©:`, {
                        id: child.userData.element?.id,
                        parentElementId: child.userData.parentElementId,
                        parentElementType: child.userData.parentElementType,
                        isJoint: child.userData.isJoint
                    });
                    
                    // V√©rifier si ce joint est li√© √† notre √©l√©ment parent
                    if (child.userData.parentElementId === parentElementId && child.userData.element) {
                        console.log(`‚úÖ Joint associ√© trouv√©: ${child.userData.element.id}`);
                        associatedJoints.push(child.userData.element.id);
                    }
                }
            });
        }
        
        // Si aucun joint trouv√© dans les userData, essayer une autre approche via SceneManager.elements
        if (associatedJoints.length === 0 && window.SceneManager?.elements) {
            console.log(`üîç M√©thode alternative: recherche dans SceneManager.elements`);
            window.SceneManager.elements.forEach((element, elementId) => {
                // V√©rifier si l'√©l√©ment a des propri√©t√©s de joint et est li√© √† notre parent
                if (element.userData && element.userData.isJoint && 
                    element.userData.parentElementId === parentElementId) {
                    console.log(`‚úÖ Joint trouv√© via SceneManager: ${elementId}`);
                    associatedJoints.push(elementId);
                } else if (element.mesh && element.mesh.userData && 
                          element.mesh.userData.isJoint && 
                          element.mesh.userData.parentElementId === parentElementId) {
                    console.log(`‚úÖ Joint trouv√© via mesh.userData: ${elementId}`);
                    associatedJoints.push(elementId);
                }
            });
        }
        
        console.log(`üîç Joints trouv√©s pour l'√©l√©ment ${parentElementId}:`, associatedJoints);
        return associatedJoints;
    }

    // ===============================================
    // FONCTIONS UTILITAIRES
    // ===============================================

    worldToScreen(worldPosition) {
        if (!window.SceneManager?.camera || !window.SceneManager?.renderer) return null;

        const vector = worldPosition.clone();
        vector.project(window.SceneManager.camera);

        const canvas = window.SceneManager.renderer.domElement;
        const rect = canvas.getBoundingClientRect();

        return {
            x: (vector.x * 0.5 + 0.5) * canvas.clientWidth + rect.left,
            y: (vector.y * -0.5 + 0.5) * canvas.clientHeight + rect.top
        };
    }

    highlightElement(element, highlight) {
        if (element?.mesh) {
            if (highlight) {
                // Sauvegarder le mat√©riau original s'il n'est pas d√©j√† sauv√©
                if (!element.originalMaterial) {
                    element.originalMaterial = element.mesh.material;
                }
                
                // Cr√©er un mat√©riau wireframe temporaire
                const wireframeMaterial = element.mesh.material.clone();
                wireframeMaterial.wireframe = true;
                wireframeMaterial.wireframeLinewidth = 2;
                element.mesh.material = wireframeMaterial;
                
                console.log(`üéØ √âl√©ment ${element.id} mis en surbrillance (wireframe)`);
            } else {
                // Restaurer le mat√©riau original
                if (element.originalMaterial) {
                    element.mesh.material = element.originalMaterial;
                    element.originalMaterial = null; // Nettoyer la r√©f√©rence
                    console.log(`‚úÖ Mat√©riau original restaur√© pour ${element.id}`);
                } else {
                    // Fallback: s'assurer qu'on n'est pas en wireframe
                    element.mesh.material.wireframe = false;
                    console.log(`üîß Wireframe d√©sactiv√© pour ${element.id} (fallback)`);
                }
                element.mesh.material.needsUpdate = true;
            }
        }
    }

    updateSelectionDisplay() {
        const count = this.selectedElements.size;
        
        // Mettre √† jour l'affichage du nombre d'√©l√©ments s√©lectionn√©s
        const statusElement = document.getElementById('selectionStatus');
        if (statusElement) {
            if (count > 0) {
                statusElement.innerHTML = `<i class="fas fa-mouse-pointer"></i> ${count} √©l√©ment(s) s√©lectionn√©(s)`;
                statusElement.classList.add('visible');
            } else {
                statusElement.classList.remove('visible');
            }
        }

        // Afficher/masquer les contr√¥les de transformation
        const transformControls = document.getElementById('transformControls');
        if (transformControls) {
            if (count > 0) {
                transformControls.classList.add('visible');
                this.setupTransformControls();
            } else {
                transformControls.classList.remove('visible');
            }
        }

        // Activer/d√©sactiver les boutons selon la s√©lection
        this.updateActionButtons(count > 0);
    }

    setupTransformControls() {
        const buttons = ['moveBtn', 'rotateBtn', 'scaleBtn'];
        buttons.forEach(btnId => {
            const btn = document.getElementById(btnId);
            if (btn && !btn.dataset.listenerAdded) {
                btn.addEventListener('click', (e) => {
                    const mode = btn.dataset.mode;
                    this.setTransformMode(mode);
                });
                btn.dataset.listenerAdded = 'true';
            }
        });
    }

    setTransformMode(mode) {
        // D√©sactiver tous les modes
        document.querySelectorAll('.transform-btn').forEach(btn => {
            btn.classList.remove('active');
        });

        // Activer le mode s√©lectionn√©
        const activeBtn = document.getElementById(`${mode}Btn`);
        if (activeBtn) {
            activeBtn.classList.add('active');
        }

        this.transformState.mode = mode;
        this.transformState.isTransforming = true;

        this.showNotification(`Mode ${mode} activ√©`, 'info');
        console.log(`üîß Mode de transformation: ${mode}`);
    }

    updateActionButtons(hasSelection) {
        const buttons = ['copyAction', 'deleteAction'];
        buttons.forEach(buttonId => {
            const button = document.getElementById(buttonId);
            if (button) {
                button.style.opacity = hasSelection ? '1' : '0.5';
            }
        });
    }

    generateUniqueId() {
        return 'element_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    showNotification(message, type = 'info', duration = 3000) {
        // Convertir le message en string et v√©rifier
        if (message == null) {
            console.warn('‚ö†Ô∏è Notification vide ignor√©e');
            return;
        }
        
        const messageStr = String(message).trim();
        if (messageStr === '') {
            console.warn('‚ö†Ô∏è Notification vide ignor√©e');
            return;
        }
        
        // Utiliser le syst√®me de notification existant si disponible
        if (window.modernInterface?.showNotification) {
            window.modernInterface.showNotification(messageStr, type, duration);
        } else if (window.FileMenuHandler?.showNotification) {
            window.FileMenuHandler.showNotification(messageStr, type, duration);
        } else {
            console.log(`üì¢ ${type.toUpperCase()}: ${messageStr}`);
        }
    }

    showClipboardIndicator(action) {
        const indicator = document.createElement('div');
        indicator.className = 'clipboard-indicator';
        indicator.innerHTML = `
            <i class="icon-${action}"></i>
            <span>${action === 'copy' ? 'Copi√©' : action === 'cut' ? 'Coup√©' : 'Coll√©'}</span>
        `;
        
        document.body.appendChild(indicator);
        
        setTimeout(() => {
            indicator.classList.add('show');
        }, 100);
        
        setTimeout(() => {
            indicator.classList.remove('show');
            setTimeout(() => {
                indicator.remove();
            }, 300);
        }, 1500);
    }

    updateHistoryUI() {
        const undoBtn = document.getElementById('btn-undo');
        const redoBtn = document.getElementById('btn-redo');
        
        if (undoBtn) {
            undoBtn.disabled = this.undoStack.length === 0;
            undoBtn.title = this.undoStack.length > 0 
                ? `Annuler: ${this.undoStack[this.undoStack.length - 1].description}`
                : 'Rien √† annuler';
        }
        
        if (redoBtn) {
            redoBtn.disabled = this.redoStack.length === 0;
            redoBtn.title = this.redoStack.length > 0 
                ? `R√©tablir: ${this.redoStack[this.redoStack.length - 1].description}`
                : 'Rien √† r√©tablir';
        }

        // Mettre √† jour l'indicateur d'historique
        this.updateHistoryIndicator();
    }

    updateHistoryIndicator() {
        // D√âSACTIV√â: Suppression de l'indicateur d'historique selon la demande utilisateur
        // L'indicateur d'historique n'est plus affich√©
        const indicator = document.getElementById('history-indicator');
        if (indicator) {
            indicator.remove();
        }
        return;
    }

    // ===============================================
    // GETTERS POUR L'INT√âGRATION
    // ===============================================

    getSelectedElements() {
        return Array.from(this.selectedElements);
    }

    getSelectedElementsData() {
        const elementsData = [];
        this.selectedElements.forEach(elementId => {
            const element = window.SceneManager?.elements.get(elementId);
            if (element) {
                elementsData.push(element.toJSON());
            }
        });
        return elementsData;
    }

    hasSelection() {
        return this.selectedElements.size > 0;
    }

    canUndo() {
        return this.undoStack.length > 1;
    }

    canRedo() {
        return this.redoStack.length > 0;
    }

    // ===============================================
    // NETTOYAGE
    // ===============================================

    destroy() {
        // Nettoyer la bo√Æte de s√©lection si elle existe
        if (this.selectionBox) {
            this.selectionBox.remove();
            this.selectionBox = null;
        }

        // Vider les piles
        this.undoStack = [];
        this.redoStack = [];
        this.clipboard = { elements: [], type: null, timestamp: null };
        this.selectedElements.clear();

        console.log('‚úÇÔ∏è Gestionnaire de menu √âdition d√©truit');
    }
}

// Initialisation automatique
document.addEventListener('DOMContentLoaded', () => {
    window.EditMenuHandler = new EditMenuHandler();
    // console.log('‚úÇÔ∏è Gestionnaire de menu √âdition initialis√©');
});

// Export pour utilisation externe
if (typeof module !== 'undefined' && module.exports) {
    module.exports = EditMenuHandler;
}
