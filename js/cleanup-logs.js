// Script pour d√©sactiver les logs excessifs et corriger l'encodage
const fs = require('fs');

let content = fs.readFileSync('./assise-manager.js', 'utf8');

// D√©sactiver les logs verbeux les plus fr√©quents
const logsToDisable = [
    // Messages de repositionnement fr√©quents
    'console.log(`üîß Joint ${elementId} ignor√© lors du repositionnement (a sa propre logique)`);',
    'console.log(`üîß Bloc/Brique ${elementId} repositionn√© sur assise ${index} (${type}) √† Y=${element.mesh.position.y}`);',
    'console.log(`üîß PROTECTION ANTI-BOUCLE: setJointHeightForAssise √©vit√©e pendant repositionnement`);',
    'console.log(`üîß Joint de l\'assise ${assiseIndex} (${type}) d√©j√† √† ${h} cm, pas de modification`);',
    'console.log(`üîß Repositionnement en cours, √©vitement de la boucle infinie`);',
    'console.log(`üîß AssiseManager: Onglet Outils en cours de mise √† jour, pas d\'interf√©rence avec ${type}`);',
    
    // Messages de hauteur et calculs
    'console.log(`üîß Hauteur de joint de l\'assise ${assiseIndex} (${type}) d√©finie √† ${h} cm`);',
    'console.log(`üîß REPOSITIONNEMENT automatique assise ${assiseIndex} (${type}) - nouvelle hauteur: ${newAssiseHeight}cm`);',
    'console.log(`üîß Hauteur de joint de l\'assise ${assiseIndex} (${type}) r√©initialis√©e`);',
    
    // Messages de recherche de type
    'console.log(`üîß AssiseManager: Type ${type} non trouv√©, essai avec le type de base: ${baseType}`);',
    'console.log(`üîß Cat√©gorie de bloc inconnue: ${category}, utilisation du type g√©n√©rique \'block\'`);',
    'console.log(`üîß BlockSelector non disponible`);'
];

// D√©sactiver ces logs en les commentant
logsToDisable.forEach(log => {
    content = content.replace(new RegExp(log.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), `// ${log}`);
});

// Corrections d'encodage restantes
const encodingFixes = [
    ['propri√†t√†', 'propri√©t√©'],
    ['r√†f√†rence', 'r√©f√©rence'],
    ['stock√†e', 'stock√©e'],
    ['plac√†', 'plac√©'],
    // Garder seulement les logs vraiment importants (erreurs critiques)
];

encodingFixes.forEach(([from, to]) => {
    content = content.replace(new RegExp(from, 'g'), to);
});

fs.writeFileSync('./assise-manager.js', content, 'utf8');
console.log('Logs excessifs d√©sactiv√©s et encodage corrig√©!');
