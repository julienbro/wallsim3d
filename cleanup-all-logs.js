const fs = require('fs');
const path = require('path');

// Fichiers √† traiter avec leurs patterns de logs √† d√©sactiver
const filesToProcess = [
    {
        file: 'index.html',
        patterns: [
            /console\.log\('‚öôÔ∏è Configuration des logs appliqu√©e - Mode production activ√©'\);/g,
            /console\.log\('üéØ Script d\'alignement des menus activ√©'\);/g
        ]
    },
    {
        file: 'js/debug-delete-icon.js',
        patterns: [
            /console\.log\('üîß Debug pour ic√¥ne de suppression charg√©'\);/g,
            /console\.log\('üìù Commandes disponibles:'\);/g,
            /console\.log\('  - testIcon\(\) : Cr√©er une ic√¥ne de test'\);/g,
            /console\.log\('  - forceRepos\(\) : Repositionner l\'ic√¥ne actuelle'\);/g,
            /console\.log\('  - checkIcon\(\) : V√©rifier l\'√©tat de l\'ic√¥ne'\);/g,
            /console\.log\('  - mouseIcon\(\) : Cr√©er une ic√¥ne qui suit la souris'\);/g,
            /console\.log\('  - fixedIcon\(\) : Cr√©er une ic√¥ne fixe de test'\);/g
        ]
    },
    {
        file: 'js/library-visibility-manager.js',
        patterns: [
            /console\.log\('üìè Biblioth√®que ajust√©e: \d+ colonnes, √©l√©ments \d+x\d+px'\);/g,
            /console\.log\('‚ö†Ô∏è Plus de \d+ √©l√©ments, activation du scroll vertical\.\.\.'\);/g
        ]
    },
    {
        file: 'js/tools-tab-manager.js',
        patterns: [
            /console\.warn\('‚ö†Ô∏è ToolsTabManager: Onglet Outils non disponible \(supprim√©\)'\);/g
        ]
    },
    {
        file: 'js/tools-help-system.js',
        patterns: [
            /console\.log\('üîß √âl√©ment non trouv√© pour le s√©lecteur: \.visual-aids-checkboxes'\);/g
        ]
    },
    {
        file: 'js/construction-tools.js',
        patterns: [
            /console\.log\('üóëÔ∏è Ic√¥ne cr√©√©e avec position forc√©e visible'\);/g,
            /console\.log\('üóëÔ∏è Ic√¥ne ajout√©e au DOM, maintenant visible'\);/g,
            /console\.log\('üóëÔ∏è Ic√¥ne de suppression affich√©e pour: ' \+ elementId\);/g,
            /console\.log\('üóëÔ∏è Animation vers position:', \{target: targetPosition, element: elementId\}\);/g,
            /console\.log\('üóëÔ∏è Suivi de cam√©ra configur√© pour: ' \+ elementId\);/g
        ]
    },
    {
        file: 'js/scene-manager.js',
        patterns: [
            /console\.log\('üîß SceneManager: Dimensions brique depuis BrickSelector: .*'\);/g
        ]
    },
    {
        file: 'js/glb-dpad-controller.js',
        patterns: [
            /console\.log\('‚ùå Curseurs Y d√©sactiv√©s'\);/g,
            /console\.log\('üéÆ D-pad remis en position initiale \(centr√© en bas\)'\);/g
        ]
    }
];

console.log('üßπ D√©sactivation des logs excessifs dans tous les fichiers...');

let totalLogs = 0;

filesToProcess.forEach(({file, patterns}) => {
    const filePath = path.join('.', file);
    
    if (!fs.existsSync(filePath)) {
        console.log(`‚ö†Ô∏è Fichier non trouv√©: ${file}`);
        return;
    }
    
    let content = fs.readFileSync(filePath, 'utf8');
    let fileChanged = false;
    let fileLogs = 0;
    
    patterns.forEach(pattern => {
        const matches = content.match(pattern);
        if (matches) {
            fileLogs += matches.length;
            content = content.replace(pattern, '// $&');
            fileChanged = true;
        }
    });
    
    if (fileChanged) {
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ ${file}: ${fileLogs} logs d√©sactiv√©s`);
        totalLogs += fileLogs;
    } else {
        console.log(`‚ÑπÔ∏è ${file}: Aucun log √† d√©sactiver`);
    }
});

console.log(`üéâ Termin√©! ${totalLogs} logs au total d√©sactiv√©s`);
