// Script pour masquer des √©l√©ments sp√©cifiques
function hideElements() {
    const elementIds = [
        '343404', '343403', '343406', '343405', '343401', 
        '343402', '343407', '343408', '343410', '343409'
    ];
    
    console.log('üôà Masquage des √©l√©ments...');
    
    elementIds.forEach(id => {
        let element = null;
        let foundKey = null;
        
        // Chercher l'√©l√©ment dans SceneManager.elements
        if (window.SceneManager && window.SceneManager.elements) {
            // Chercher par ID exact
            element = window.SceneManager.elements.get(id);
            if (element) {
                foundKey = id;
            } else {
                // Chercher par ID partiel
                for (let [key, el] of window.SceneManager.elements) {
                    if (key.includes(id)) {
                        element = el;
                        foundKey = key;
                        break;
                    }
                }
            }
        }
        
        if (element) {
            console.log(`üëª Masquage √©l√©ment: ${foundKey}`);
            
            // M√©thode 1: Rendre invisible via le mesh
            if (element.mesh) {
                element.mesh.visible = false;
                console.log(`  ‚úÖ Mesh rendu invisible`);
            }
            
            // M√©thode 2: D√©finir une propri√©t√© hidden sur l'√©l√©ment
            element.hidden = true;
            
            // M√©thode 3: Si l'√©l√©ment a une m√©thode hide
            if (typeof element.hide === 'function') {
                element.hide();
                console.log(`  ‚úÖ M√©thode hide() appel√©e`);
            }
            
            // M√©thode 4: Si l'√©l√©ment a une propri√©t√© visible
            if (element.hasOwnProperty('visible')) {
                element.visible = false;
                console.log(`  ‚úÖ Propri√©t√© visible mise √† false`);
            }
            
        } else {
            console.warn(`‚ùå √âl√©ment ${id} non trouv√©`);
        }
    });
    
    console.log('‚úÖ Masquage termin√©');
}

// Fonction pour r√©-afficher les √©l√©ments si n√©cessaire
function showElements() {
    const elementIds = [
        '343404', '343403', '343406', '343405', '343401', 
        '343402', '343407', '343408', '343410', '343409'
    ];
    
    console.log('üëÅÔ∏è Affichage des √©l√©ments...');
    
    elementIds.forEach(id => {
        let element = null;
        let foundKey = null;
        
        if (window.SceneManager && window.SceneManager.elements) {
            for (let [key, el] of window.SceneManager.elements) {
                if (key.includes(id)) {
                    element = el;
                    foundKey = key;
                    break;
                }
            }
        }
        
        if (element) {
            console.log(`üëÅÔ∏è Affichage √©l√©ment: ${foundKey}`);
            
            if (element.mesh) {
                element.mesh.visible = true;
            }
            element.hidden = false;
            if (typeof element.show === 'function') {
                element.show();
            }
            if (element.hasOwnProperty('visible')) {
                element.visible = true;
            }
        }
    });
    
    console.log('‚úÖ Affichage termin√©');
}

// Ex√©cuter le masquage
hideElements();

// Exposer les fonctions pour usage ult√©rieur
window.hideSpecificElements = hideElements;
window.showSpecificElements = showElements;